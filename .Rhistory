"MAG726A","MAG258","MAG714A","MAG701B","MAG373","MAG320","MAG513", "MAG420","MAG533",
"MAG514","MAG176B","MAG157","MAG761A","MAG739A","MAG325","MAG749B","MAG183",
"MAG62","MAG191","MAG97","MAG5","MAG313","MAG169","MAG242","MAG248","MAG10",
"MAG386","MAG342","MAG749C","MAG215","MAG177","MAG746B","MAG31","MAG746A",
"MAG66","MAG21","MAG251","MAG755A","MAG243A","MAG144B","MAG278","MAG158B",
"MAG154","MAG146","MAG733A","MAG748A","MAG230","MAG192D","MAG406","MAG282",
"MAG48","MAG41","MAG184","MAG123","MAG245","MAG199","MAG540","MAG200","MAG182",
"MAG24","MAG523","MAG73","MAG204","MAG286","MAG145","MAG358","MAG539","MAG16",
"MAG225","MAG40","MAG417")
setdiff(test,unique(freq.long$Strain1))
test = c("MAG220","MAG18","MAG27","MAG322","MAG148B","MAG201","MAG34","MAG88",
"MAG42","MAG530","MAG384","MAG221","MAG121","MAG65","MAG726B","MAG722B",
"MAG726A","MAG258","MAG714A","MAG701B","MAG373","MAG320","MAG513", "MAG420","MAG533",
"MAG514","MAG176B","MAG157","MAG761A","MAG739A","MAG325","MAG749B","MAG183",
"MAG62","MAG191","MAG97","MAG5","MAG313","MAG169","MAG242","MAG248","MAG10",
"MAG386","MAG342","MAG749C","MAG215","MAG177","MAG746B","MAG31","MAG746A",
"MAG66","MAG21","MAG259","MAG755A","MAG243A","MAG144B","MAG278","MAG158B",
"MAG154","MAG146","MAG733A","MAG748A","MAG230","MAG192D","MAG406","MAG282",
"MAG48","MAG41","MAG184","MAG123","MAG245","MAG199","MAG540","MAG200","MAG182",
"MAG24","MAG523","MAG73","MAG204","MAG286","MAG145","MAG358","MAG539","MAG16",
"MAG225","MAG40","MAG417")
setdiff(test,unique(freq.long$Strain1))
setdiff(unique(freq.long$Strain1),test)
length(test)
length(unique(freq.long$Strain1))
freq.long$Strain1 <- factor(freq.long$Strain1, levels = c("MAG220","MAG18","MAG27","MAG322","MAG148B","MAG201","MAG34","MAG88",
"MAG42","MAG530","MAG384","MAG221","MAG121","MAG65","MAG726B","MAG722B",
"MAG726A","MAG258","MAG714A","MAG701B","MAG373","MAG320","MAG513", "MAG420","MAG533",
"MAG514","MAG176B","MAG157","MAG761A","MAG739A","MAG325","MAG749B","MAG183",
"MAG62","MAG191","MAG97","MAG5","MAG313","MAG169","MAG242","MAG248","MAG10",
"MAG386","MAG342","MAG749C","MAG215","MAG177","MAG746B","MAG31","MAG746A",
"MAG66","MAG21","MAG259","MAG755A","MAG243A","MAG144B","MAG278","MAG158B",
"MAG154","MAG146","MAG733A","MAG748A","MAG230","MAG192D","MAG406","MAG282",
"MAG48","MAG41","MAG184","MAG123","MAG245","MAG199","MAG540","MAG200","MAG182",
"MAG24","MAG523","MAG73","MAG204","MAG286","MAG145","MAG358","MAG539","MAG16",
"MAG225","MAG40","MAG417"))
freq.long$Strain2 <- factor(freq.long$Strain2, levels = c("MAG220","MAG18","MAG27","MAG322","MAG148B","MAG201","MAG34","MAG88",
"MAG42","MAG530","MAG384","MAG221","MAG121","MAG65","MAG726B","MAG722B",
"MAG726A","MAG258","MAG714A","MAG701B","MAG373","MAG320","MAG513", "MAG420","MAG533",
"MAG514","MAG176B","MAG157","MAG761A","MAG739A","MAG325","MAG749B","MAG183",
"MAG62","MAG191","MAG97","MAG5","MAG313","MAG169","MAG242","MAG248","MAG10",
"MAG386","MAG342","MAG749C","MAG215","MAG177","MAG746B","MAG31","MAG746A",
"MAG66","MAG21","MAG259","MAG755A","MAG243A","MAG144B","MAG278","MAG158B",
"MAG154","MAG146","MAG733A","MAG748A","MAG230","MAG192D","MAG406","MAG282",
"MAG48","MAG41","MAG184","MAG123","MAG245","MAG199","MAG540","MAG200","MAG182",
"MAG24","MAG523","MAG73","MAG204","MAG286","MAG145","MAG358","MAG539","MAG16",
"MAG225","MAG40","MAG417"))
freq.long %>% na.omit() %>% ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile()
ggdendrogram(hc, rotate = TRUE, size = 3) +
theme(axis.text.x = element_text(size = 8),  # x-axis labels (for horizontal dendrogram)
axis.text.y = element_text(size = 8))
ggarrange(p1,p2,ncol=2, common.legend = TRUE)
freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = top)
freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = 'top')
freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = 'top',
x.axis.title = element_blank(),
x.axis.text = element_blank())
freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = 'top',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = 'top',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank())
# Note order in tree
order = c("MAG220","MAG18","MAG27","MAG322","MAG148B","MAG201","MAG34","MAG88",
"MAG42","MAG530","MAG384","MAG221","MAG121","MAG65","MAG726B","MAG722B",
"MAG726A","MAG258","MAG714A","MAG701B","MAG373","MAG320","MAG513", "MAG420","MAG533",
"MAG514","MAG176B","MAG157","MAG761A","MAG739A","MAG325","MAG749B","MAG183",
"MAG62","MAG191","MAG97","MAG5","MAG313","MAG169","MAG242","MAG248","MAG10",
"MAG386","MAG342","MAG749C","MAG215","MAG117","MAG746B","MAG31","MAG746A",
"MAG66","MAG21","MAG251","MAG755A","MAG243A","MAG144B","MAG278","MAG158B",
"MAG154","MAG146","MAG733A","MAG748A","MAG230","MAG192D","MAG406","MAG282",
"MAG48","MAG41","MAG184","MAG123","MAG245","MAG199","MAG540","MAG200","MAG182",
"MAG24","MAG523","MAG73","MAG204","MAG286","MAG145","MAG358","MAG539","MAG16",
"MAG225","MAG40","MAG417")
# Reverse order for plotting
order = rev(order)
freq.long$Strain1 <- factor(freq.long$Strain1, levels = order)
freq.long$Strain2 <- factor(freq.long$Strain2, levels = order)
freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = 'top',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank())
library(ggpubr)
ggarrange(p1,p2,ncol=2, common.legend = TRUE)
p1 <- freq.long %>% na.omit() %>%
ggplot(aes(x = Strain1, y = Strain2, fill = corr.rel.freq)) +
geom_tile() +
theme(legend.position = 'top',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank())
p2 <- ggdendrogram(hc, rotate = TRUE, size = 3) +
theme(axis.text.x = element_text(size = 8),  # x-axis labels (for horizontal dendrogram)
axis.text.y = element_text(size = 8))  # y-axis labels (for rotated dendrogram)
ggarrange(p1,p2,ncol=2, common.legend = TRUE)
pdf("./PoolFreq_SNP_Similarity.pdf", width = 15, height = 8)
ggarrange(p1,p2,ncol=2, common.legend = TRUE)
dev.off()
pdf("./PoolFreq_SNP_Similarity.pdf", width = 15, height = 8)
ggarrange(p1,p2,ncol=2, common.legend = TRUE, widths = c(1,2))
dev.off()
pdf("./PoolFreq_SNP_Similarity.pdf", width = 15, height = 10)
ggarrange(p1,p2,ncol=2, common.legend = TRUE, widths = c(2,1))
dev.off()
View(df)
df %>% ggplot(aes(x = PercentMatch, y = corr.rel.freq)) + geom_point()
df$SNPs_shared = 254255 * df$PercentMatch
df %>% ggplot(aes(x = SNPs_shared, y = corr.rel.freq)) +
geom_point() +
xlab("")
View(df)
# Note # of different SNPs
df$SNPs_diff = 254255 * (1-(df$PercentMatch / 100)
# Note # of different SNPs
df$SNPs_diff = 254255 * (1-(df$PercentMatch / 100))
# Note # of different SNPs
df$SNPs_diff = 254255 * (1-(df$PercentMatch / 100))
df %>% ggplot(aes(x = SNPs_shared, y = corr.rel.freq)) +
geom_point() +
xlab("")
df %>% ggplot(aes(x = SNPs_diff, y = corr.rel.freq)) +
geom_point() +
xlab("")
df %>% ggplot(aes(x = SNPs_diff, y = corr.rel.freq)) +
geom_point() +
xlab("Number of Shared SNPs") +
ylab("Rel. Freq. Correlation") +
ggtitle("SNP Similarity and Correlation in Rel. Freq. Across 808 Plants") +
theme_classic()
rm(list = ls(all = TRUE))
library(tidyverse)
# Strain diversity LASSO --------------------------------------------------
# Load data with nodules traits
nod.df <- read.csv("./Data/HapMap-SpanFran2-Spring2020/df_summary.csv")
setwd("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/GitHub Repositories/MedicagoNodule-SelectivitySanctions/Source")
rm(list = ls(all = TRUE))
library(tidyverse)
# Strain diversity LASSO --------------------------------------------------
# Load data with nodules traits
nod.df <- read.csv("./Data/HapMap-SpanFran2-Spring2020/df_summary.csv")
setwd("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/GitHub Repositories/MedicagoNodule-SelectivitySanctions")
rm(list = ls(all = TRUE))
library(tidyverse)
# Strain diversity LASSO --------------------------------------------------
# Load data with nodules traits
nod.df <- read.csv("./Data/HapMap-SpanFran2-Spring2020/df_summary.csv")
# Load data with strains
strain.df <- read.csv("./Data/epstein_et_al_2022/epstein_et_al_2022_S9.csv")
# Calculate SDI and combine with nodule data
strain.df$pot <- as.integer(strain.df$pot_or_sample)
strain.df$geno <- strain.df$host_genotype
df <- nod.df %>%
right_join(strain.df) %>% filter(grepl('HM', host_genotype)) %>%
filter(!is.na(nodule_calc_count))
df$nodule_number <- as.integer(round(df$nodule_calc_count, digits=0))
# Calculate Shannon Diversity Index
library(vegan)
for(i in 1:nrow(df)) {
strains <- df %>% select(201:288)
df$H[i] <- diversity(strains[i,])
}
# LASSO Regression
library(glmnet)
# Separate traits and Shannon diversity
traits <- df %>%
select(pred.prop.lobed, ends_with("var"), ends_with("mean"),
ends_with("var"), ends_with("mean"), nodule_number) %>%
select(-starts_with("BX"), -starts_with("BY"), -starts_with("StdDev"),
-starts_with("FeretX"), -starts_with("FeretY"), -starts_with("Angle"),
-starts_with("FeretAngle")) %>%  select(-starts_with("Angle")) %>%
lapply(as.numeric) %>% data.frame()
# Center and scale data!
traits <- scale(traits)
H <- df %>% select(H)
# Join with H
traits <- as.matrix(traits)
H <- as.matrix(H)
df <- cbind(H, traits)
# Determine test and training
train <- sample(1:755, 350)
test <- setdiff(seq(1,755,1),train)
train.df <- df[train,]
test.df <- df[test,]
###Calculate best lambda
grid <- 10^seq(10, -3, length = 100)
lasso.mod <- glmnet(traits[train,], H[train,1], alpha = 1,
lambda = grid)
plot(lasso.mod)
plot(lasso.mod, xvar = "lambda", label = TRUE,xlim = c(-8, -2))
plot(lasso.mod, label = TRUE, xvar = "dev")
cv.out <- cv.glmnet(traits[train,], H[train,1], alpha = 1)
plot(cv.out)
bestlam <- cv.out$lambda.min
log(bestlam)
bestlam
lasso.pred <- predict(lasso.mod , s = bestlam,
newx = traits[test,])
mean((lasso.pred - H[test,1])^2)
out <- glmnet(traits, H, alpha = 1, lambda = grid)
lasso.coef <- predict(out , type = "coefficients",
s = bestlam)[1:31, ]
lasso.coef[lasso.coef!=0]
# We can use lasso for model selection!
x <- traits[,names(lasso.coef[lasso.coef!=0])[-1]]
# Least squares fit with variables selected by lasso
modLasso <- lm(H ~ x)
summary(modLasso)
# Plot (make this pretty)
predicted.values <- predict(modLasso, type = "response")
# Nod Strain Host Selectivity Simulation ----------------------------------
# Load data
strain.frequency <- read.csv("./Data/epstein_et_al_2022/epstein_et_al_2022_S9.csv")
nodules <- read.csv("./Data/HapMap-SpanFran2-Spring2020/df_summary.csv")
# Extract mean initial frequency values
mean_initial <- apply(strain.frequency[1:4,3:ncol(strain.frequency)],2,mean)
# Filter to genotypes and add nodule number
strain.frequency$pot <- as.integer(strain.frequency$pot_or_sample)
strain.frequency$geno <- strain.frequency$host_genotype
strain.frequency.obs <- nodules %>% select(pot, nodule_raw_count) %>%
right_join(strain.frequency) %>% filter(grepl('HM', host_genotype)) %>%
filter(!is.na(nodule_raw_count))
strain.frequency.obs$nodule_number <- strain.frequency.obs$nodule_raw_count
# Calculate Shannon Diversity Index
library(vegan)
for(i in 1:nrow(strain.frequency.obs)) {
strains <- strain.frequency.obs %>% select(5:92)
strain.frequency.obs$H[i] <- diversity(strains[i,])
}
# Complete replicate nodule draw simulation
# Create empty matrix with nodule number
strain.frequency.sim = data.frame(matrix(nrow=755,ncol=88))
strain.frequency.sim[is.na(strain.frequency.sim)] <- 0
colnames(strain.frequency.sim) = colnames(strain.frequency.obs[,5:92])
strain.frequency.sim$nodule_number = strain.frequency.obs$nodule_number
strain.frequency.sim$pot = strain.frequency.obs$pot
strain.frequency.sim$sim = as.numeric(NA)
# Run simulation
set.seed(123)
sim.out <- NULL
sim.temp <- NULL
for(s in 1:10){
strain.frequency.sim$sim = s
# make blank for new simulation
strain.frequency.sim.temp <- strain.frequency.sim
for(i in 1:nrow(strain.frequency.sim)) {
v <- sample(1:88, strain.frequency.sim.temp$nodule_number[i], replace = TRUE, prob = mean_initial)
for(j in v) {
strain.frequency.sim.temp[i,j] <- strain.frequency.sim.temp[i,j] + 1
}
}
# Calculate Shannon Diversity Index
for(j in 1:nrow(strain.frequency.sim.temp)) {
strains <- strain.frequency.sim.temp %>% select(1:88)
strain.frequency.sim.temp$H[j] <- diversity(strains[j,])
}
sim.temp <- strain.frequency.sim.temp %>% select(pot,nodule_number,sim,H)
sim.out <- bind_rows(sim.out, sim.temp)
}
# Summarize simulation output per pot
sim.summary <- sim.out %>% group_by(pot,nodule_number) %>%
summarise(mean_H = mean(H, na.rm=T),
H_sd = sd(H,na.rm=T),
H_var = var(H),
H_samp = n()) %>%
mutate(H.stderr = H_sd/sqrt(H_samp))
# Store mean host selectivity mean from 10 simulations
host.selectivity <- sim.summary %>% select(pot, mean_H)
temp <- strain.frequency.obs %>% select(pot, H)
host.selectivity <- host.selectivity %>% left_join(temp)
host.selectivity$host.selectivity_mean.sim <- host.selectivity$mean_H - host.selectivity$H
colnames(host.selectivity) <- c('pot', 'mean_sim.H', 'obs.H', 'host.selectivity')
# Add block back to strain frequency and diversity df
metadata <- read.csv("./Data/HapMap-SpanFran2-Spring2020/S&RGWAS_PlantMetaData&Nodules_WInter2020.csv")
selectivity_geno_df <- metadata %>% select(pot,geno,block) %>%
right_join(host.selectivity) %>% select(geno,block,host.selectivity) %>% na.omit()
# Create lm with host selectivity, geno, and block
geno_selectivity <- lm(host.selectivity ~ geno + block, data = selectivity_geno_df)
summary(geno_selectivity)
# Figure 2 A) Host Selectivity Histogram ----------------------------------------------
Fig2A <- host.selectivity %>% ggplot(aes(x = host.selectivity)) +
geom_histogram() +
xlab("Host Selectivity") +
ylab("n") +
theme_classic()
pdf("./Figures/Figure2A.pdf", width = 6, height = 5)
Fig2A
dev.off()
# Figure 2 B) RDA of Nodule Traits w/ Genotype ----------------------------------------
# Add R108 (M. truncatula metadata)
metadata.HM340 <- NULL
metadata.HM340$pot <- c(40,234,448,667)
metadata.HM340$block <- c(1,2,3,4)
metadata.HM340$geno <- "HM340"
metadata <- metadata.HM340 %>% as.data.frame() %>% bind_rows(metadata)
# Recreate df and select traits of interest
RDA_df <- metadata %>% select(geno, pot, block) %>% right_join(nodules) %>%
select(geno, block, pred.prop.lobed, nodule_calc_count, Area_mean, Perim._mean,
Width_mean, Height_mean, Major_mean, Minor_mean, Circ._mean, Feret_mean,
MinFeret_mean, AR_mean, Round_mean, Solidity_mean, compactness_mean,
elongation_mean)
# Rename variables for logical plotting
colnames(RDA_df) <- c('geno', 'block', 'prop.lobed', 'no.nodules', 'area', 'perim.',
'width', 'height', 'major', 'minor', 'circ.', 'feret', 'min.feret', 'aspect', 'round',
'solidity', 'compact.', 'elong.')
# Remove the NA
RDA_df <- RDA_df %>% na.omit()
# Split dfs
RDA_geno_df <- RDA_df %>% select(geno,block)
RDA_traits_df <- RDA_df %>% select(-geno,-block)
# Execute RDA
RDA_geno <- rda(RDA_traits_df ~ geno + block, data=RDA_geno_df, scale = TRUE, centered = TRUE)
RDA_geno
RDA_geno_sum <- summary(RDA_geno)
RDA_geno_sum
RDA_geno_sum$cont$importance[2, "RDA1"]
RDA_geno_sum$cont$importance[2, "RDA2"]
# Select HM340 (R108) and HM101 (A17) to plot
HM <- c("HM340", "HM101")
genos <- NULL
genos$geno <- substr(rownames(RDA_geno_sum$centroids),5,9)
genos$RDA1 <- RDA_geno_sum$centroids[,1]
genos$RDA2 <- RDA_geno_sum$centroids[,2]
genos <- as.data.frame(genos)
genos <- genos %>% filter(geno %in% HM)
genos$names <- c("A17", "R108")
# Visualize results
percent <- function(x, digits = 2, format = "f", ...) {      # Create user-defined function
paste0(formatC(x * 100, format = format, digits = digits, ...), "%")
}
library(gridGraphics)
plot(RDA_geno, type='n', scaling=2, xlim = c(-2.5,2.5), ylim = c(-2.5,2.5))
text(genos$RDA1, genos$RDA2,col='black', label = genos$names, cex=0.5)
points(RDA_geno, display='cn', col='black', scaling=2, cex=0.5)
text(RDA_geno, display='sp', col='red', cex=0.5, scaling=2)
mtext(percent(RDA_geno_sum$cont$importance[2, "RDA1"]), side = 1, line = 2)
mtext(percent(RDA_geno_sum$cont$importance[2, "RDA2"]), side = 2, line = 2)
Fig2B <-recordPlot()
plot.new()
# Test
anova(RDA_geno, step = 1000, permutations=1000, by = 'terms')
RsquareAdj(RDA_geno, 1000)
pdf("./Figures/Figure2B.pdf", width = 6, height = 6)
Fig2B
dev.off()
# Host Selectivity Heritability -------------------------------------------
### Load Brian Wards Broad Sense Heritability Estimate Function
### from following package no longer supported by this version of
### R
### https://github.com/etnite/bwardr
# Calculate Generalized Heritability from lme4 Model
#
# @param model A lme4 model object
# @param geno_label A string denoting the label of the random genotypic effect in the
#   supplied lme4 model object
# @return A list containing the following elements:
# * avsed The average standard error of differences between adjusted means estimates
# * H2 The generalized heritability estimate
# @details This function calculates generalized heritability using the method of
#   Cullis et al., 2006 (\url{https://doi.org/10.1198/108571106X154443}).
#   Specifically, their formula is H2 = 1 - (vblup / (2 * var_g)). Where the
#   generalized heritability (H2) is a function of the reliability of the BLUPs
#   (vblup - the average standard error of differences between BLUPs squared),
#   and the genotypic variance (var_g). This method can be used in unbalanced
#   applications where the traditional entry-mean heritability calculation will
#   give biased estimates. The method of doing this using lme4 is detailed by
#   Ben Bolker at \url{https://stackoverflow.com/questions/38697477/mean-variance-of-a-difference-of-blues-or-blups-in-lme4}.
#   This method yields values that are slightly different (I have observed up to
#   0.75%) from ASReml-R's results. Another solution I came across at
#   \url{https://shantel-martinez.github.io/resources.html} seems to produce
#   results that are more divergent from ASReml-R's.
Cullis_H2 <- function(model, geno_label = "GENO") {
## Extract genotypic variance
var_g <- lme4::VarCorr(model, comp = "Variance")[[geno_label]][1]
## Extract genotypic conditional variances
convars <- lme4::ranef(model, condVar = TRUE)
g_convar <- attr(convars[[geno_label]], "postVar")
## Calculate VBLUP and avsed
vblup <- 2 * mean(g_convar)
avsed <- sqrt(vblup)
## Calculate generalized heritability
H2 <- 1 - (vblup / (2 * var_g))
## Create and return output list
out_list <- list("avsed" = avsed, "H2" = H2)
return(out_list)
}
# Load packages
library(tidyverse)
library(lmerTest)
library(lme4)
# Gather geno data
heritability <- metadata %>% select(pot, geno, block) %>% right_join(host.selectivity) %>%
filter(!is.na(geno)) %>%  filter(!is.na(host.selectivity)) %>% select(geno, block, host.selectivity)
mixed_model <- lmer(host.selectivity ~ (1|geno) + block, data = heritability, REML = T)
broad_sense_H2_estimate <- Cullis_H2(model = mixed_model, geno_label = "geno")
broad_sense_H2_estimate[[2]]
# Figure 2 C) Host Selectivity LASSO Genotypic Means ----------------------------------
# Load data with nodules traits
df <- read_csv("Data/HapMap-SpanFran2-Spring2020/df_summary.csv")
# Load host.selectivity trait
df <- host.selectivity %>% select(pot, host.selectivity) %>%
left_join(df) %>% na.omit()
# Join Genotype metadata
df <- metadata %>% select(geno, pot) %>% right_join(df)
library(glmnet)
# Select nodule traits
traits <- df %>% ungroup() %>%
select(pred.prop.lobed, ends_with("var"), ends_with("mean"),
ends_with("var"), ends_with("mean")) %>%
select(-starts_with("BX"), -starts_with("BY"), -starts_with("StdDev"),
-starts_with("FeretX"), -starts_with("FeretY"), -starts_with("Angle"),
-starts_with("FeretAngle")) %>%  select(-starts_with("Angle")) %>%
lapply(as.numeric) %>% data.frame()
traits$H <- df$host.selectivity
traits$geno <- df$geno
# Summarize traits by genotype!
df.geno.sum <- df %>% group_by(geno) %>%
summarise_if(is.numeric, mean, na.rm = TRUE)
# Separate traits means and host selectivity means!
traits <- df.geno.sum %>% ungroup() %>%
select(pred.prop.lobed, ends_with("var"), ends_with("mean"),
ends_with("var"), ends_with("mean")) %>%
select(-starts_with("BX"), -starts_with("BY"), -starts_with("StdDev"),
-starts_with("FeretX"), -starts_with("FeretY"), -starts_with("Angle"),
-starts_with("FeretAngle")) %>%  select(-starts_with("Angle")) %>%
lapply(as.numeric) %>% data.frame()
# Center and scale traits!
traits <- scale(traits)
HS <- df.geno.sum[,3]
# Join with host.selectivity
traits <- as.matrix(traits)
HS <- as.matrix(HS)
df <- cbind(HS, traits)
# Determine test and training
train <- sample(1:203, 150)
test <- setdiff(seq(1,203,1),train)
train.df <- df.geno.sum[train,]
test.df <- df.geno.sum[test,]
# Calculate best lambda
grid <- 10^seq(10, -3, length = 100)
lasso.mod <- glmnet(traits[train,], HS[train,], alpha = 1,
lambda = grid)
plot(lasso.mod)
plot(lasso.mod, xvar = "lambda", label = TRUE,xlim = c(-8, -2))
plot(lasso.mod, label = TRUE, xvar = "dev")
cv.out <- cv.glmnet(traits[train,], HS[train,1], alpha = 1)
plot(cv.out)
bestlam <- cv.out$lambda.min
log(bestlam)
bestlam
lasso.pred <- predict(lasso.mod , s = bestlam,
newx = traits[test,])
mean((lasso.pred - HS[test,1])^2)
out <- glmnet(traits, HS, alpha = 1, lambda = grid)
lasso.coef <- predict(out, type = "coefficients",
s = bestlam)
modLasso <- lm(host.selectivity ~ Area_mean, data = df.geno.sum)
summary(modLasso)
modLasso <- lm(host.selectivity ~ elongation_mean, data = df.geno.sum)
summary(modLasso)
modLasso <- lm(host.selectivity ~ Major_mean, data = df.geno.sum)
summary(modLasso)
# Yet, iterative decreases in parameters show how Width_mean and Major_mean are
# Prominent variables
lasso.coef
d.geno <- df.geno.sum %>%
ggplot(aes(y = host.selectivity, x = elongation_mean)) +
geom_point(aes(), color="black", pch=21, size=2, alpha=0.8) +
theme(legend.title = element_text(face = "bold", size=10),
axis.title = element_text(face = "bold", size=10)) +
theme_classic() + ylab("host.selectivity") + xlab("elongation_mean")
d.geno
#fit quadratic regression model
qm <- lm(host.selectivity ~ elongation_mean, data = df.geno.sum)
summary(qm)
#create a new variable for Major_mean2
df.geno.sum$Major_mean2 <- df.geno.sum$Major_mean^2
#fit quadratic regression model
qm <- lm(host.selectivity ~ Major_mean + Major_mean2, data = df.geno.sum)
summary(qm)
df.geno.sum$elongation_mean2 <- df.geno.sum$elongation_mean^2
#fit quadratic regression model
qm <- lm(host.selectivity ~ elongation_mean + elongation_mean2, data = df.geno.sum)
summary(qm)
View(df.geno.sum)
13/203
1-(13/203)
1-(13/202)
